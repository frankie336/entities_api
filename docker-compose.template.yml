version: "3.8"

services:
  db:
    image: mysql:8.0
    container_name: my_mysql_cosmic_catalyst
    restart: always
    # REMOVED env_file: - .env
    environment:
      # Direct injection will handle these
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
    ports:
      - "${MYSQL_EXTERNAL_PORT:-3307}:3306" # Use variable for external port mapping
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - my_custom_network

  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant_server
    restart: always
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_storage:/qdrant/storage
    environment:
      # These are static or injected directly
      QDRANT__STORAGE__STORAGE_PATH: "/qdrant/storage"
      QDRANT__SERVICE__GRPC_PORT: "6334"
      QDRANT__LOG_LEVEL: "${LOG_LEVEL:-INFO}" # Allow override from .env
    networks:
      - my_custom_network

  api:
    build:
      context: .
      dockerfile: docker/api/Dockerfile
    container_name: fastapi_cosmic_catalyst
    restart: always
    env_file: # API relies heavily on env_file per gold standard
      - .env
    environment:
      # Only inject vars explicitly listed in gold standard's environment section
      DATABASE_URL: ${DATABASE_URL} # This will be substituted by script
      SANDBOX_SERVER_URL: ${SANDBOX_SERVER_URL} # This will be substituted
      QDRANT_URL: ${QDRANT_URL} # This will be substituted
      DEFAULT_SECRET_KEY: ${DEFAULT_SECRET_KEY} # This will be substituted
    ports:
      - "9000:9000"
    depends_on:
      db:
        condition: service_healthy
      sandbox:
        condition: service_started
      qdrant:
        condition: service_started
    command:
      - ./wait-for-it.sh
      - db:3306
      - --
      - uvicorn
      - entities_api.app:app # Ensure this matches your app path
      - --host
      - 0.0.0.0
      - --port
      - "9000"
    networks:
      - my_custom_network

  sandbox:
    build:
      context: .
      dockerfile: docker/sandbox/Dockerfile
    container_name: sandbox_api
    restart: always
    cap_add:
      - SYS_ADMIN
    security_opt:
      - seccomp:unconfined
    devices:
      - /dev/fuse
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - /tmp/sandbox_logs:/app/logs # Consider making host path configurable?
    env_file: # Sandbox relies entirely on env_file per gold standard
      - .env
    # NO 'environment:' section here, matching gold standard
    networks:
      - my_custom_network

  samba:
    image: dperson/samba
    container_name: samba_server
    restart: unless-stopped
    environment:
      # Direct injection handles these, keep placeholders if preferred, but direct is fine too
      USERID: ${SAMBA_USERID:-1000} # Allow override, default 1000
      GROUPID: ${SAMBA_GROUPID:-1000} # Allow override, default 1000
      TZ: ${SAMBA_TZ:-UTC} # Allow override, default UTC
      USER: "${SMBCLIENT_USERNAME};${SMBCLIENT_PASSWORD}" # Composite, injected by script
      SHARE: "${SMBCLIENT_SHARE};/samba/share;yes;no;no;${SMBCLIENT_USERNAME}" # Composite, injected
      GLOBAL: "server min protocol = NT1\nserver max protocol = SMB3" # Static multi-line
    ports:
      - "139:139" # Keep standard host port unless conflict
      - "445:445" # Keep standard host port unless conflict
    volumes:
      # Use the literal placeholder, Docker Compose will handle it
      - ${SHARED_PATH}:/samba/share
    networks:
      - my_custom_network

# --- Top Level Definitions ---
volumes:
  mysql_data:
    driver: local # Explicit driver
  qdrant_storage:
    driver: local # Explicit driver

networks:
  my_custom_network:
    driver: bridge # Explicit driver