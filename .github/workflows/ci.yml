name: Lint, Test, Build, and Publish Docker Images

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

permissions:
  contents: write   # semantic‑release + auto‑formatter commits
  packages: write   # push to Docker Hub / GHCR

jobs:
  # -------------------------------------------------------------------------
  #  🧹  Lint
  # -------------------------------------------------------------------------
  lint:
    name: "\U0001F9F9 Lint Code & Dockerfiles"
    runs-on: ubuntu-latest

    steps:
      - name: "\U0001F57E Checkout repository"
        uses: actions/checkout@v4

      - name: "\U0001F40D Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: "\U0001F4E6 Cache pip dependencies"
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: |
            ${{ runner.os }}-pip-lint-${{ hashFiles('**/*_reqs_*.txt', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-lint-

      - name: "\u2699\ufe0f Install Linting Tools"
        run: |
          python -m pip install --upgrade pip
          pip install "ruff==0.4.0" black
          sudo wget -O /usr/local/bin/hadolint \
            https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
          sudo chmod +x /usr/local/bin/hadolint

      - name: "✨ Run Ruff Linter"
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            ruff check . --output-format=github
          else
            ruff check . --fix --output-format=github || true
          fi

      - name: "⚫️ Run Black Formatter"
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            black --check .
          else
            black .
            git diff --exit-code || true
          fi

      - name: "\U0001F433 Lint Dockerfiles"
        run: |
          hadolint docker/api/Dockerfile    || true
          hadolint docker/sandbox/Dockerfile || true

  # -------------------------------------------------------------------------
  #  ✅  Tests
  # -------------------------------------------------------------------------
  test:
    name: "✅ Run Unit Tests"
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
      - name: "\U0001F57E Checkout repository"
        uses: actions/checkout@v4

      - name: "\U0001F40D Set up Python ${{ matrix.python-version }}"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: "\U0001F4E6 Cache pip dependencies"
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: |
            ${{ runner.os }}-pip-test-${{ matrix.python-version }}-${{ hashFiles('**/*_reqs_*.txt', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-test-${{ matrix.python-version }}-

      - name: "\u2699\ufe0f Install Project & Test Deps"
        run: |
          python -m pip install --upgrade pip
          # --- API deps ---
          pip install -r api_unhashed_reqs.txt
          pip install --require-hashes -r api_reqs_hashed.txt
          # --- Sandbox deps (optional but keeps env parity with Docker image) ---
          pip install -r sandbox_reqs_unhashed.txt
          pip install --require-hashes -r sandbox_reqs_hashed.txt
          # --- Test tools ---
          pip install pytest pytest-cov

      - name: "✅ Run Pytest with Coverage"
        run: pytest tests/ --cov=src --cov-report=xml --cov-report=term-missing

      - name: "⬆️ Upload coverage reports to Codecov"
        uses: codecov/codecov-action@v4.0.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  # -------------------------------------------------------------------------
  #  🚀  Build & Publish Docker images (main/master pushes)
  # -------------------------------------------------------------------------
  build_and_publish:
    name: "🚀 Build, Tag, and Publish Images to Docker Hub"
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
      - name: "\U0001F57E Checkout repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: "⚙️ Setup QEMU"
        uses: docker/setup-qemu-action@v3

      - name: "⚙️ Setup Docker Buildx"
        uses: docker/setup-buildx-action@v3

      - name: "🔑 Login to Docker Hub"
        uses: docker/login-action@v3
        with:
          username: thanosprime
          password: ${{ secrets.DOCKERHUB_THANOSPRIME }}

      - name: "🚀 Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: "\u2699\ufe0f Install semantic-release"
        run: |
          npm install -g semantic-release \
            @semantic-release/commit-analyzer \
            @semantic-release/release-notes-generator \
            @semantic-release/changelog \
            @semantic-release/exec \
            @semantic-release/git \
            @semantic-release/github

      - name: "🚀 Run semantic-release"
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

      - name: "🏷️ Extract Git Tag Version"
        id: get_version
        if: success()
        run: |
          git fetch --tags origin
          VERSION=$(git describe --tags --exact-match HEAD 2>/dev/null || git describe --tags --abbrev=0 HEAD 2>/dev/null)
          if [ -z "$VERSION" ]; then
            echo "::error::Could not determine version tag after semantic-release ran successfully."
            exit 1
          fi
          VERSION=${VERSION#v}
          echo "Detected version from tag: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      # ---------------- API image ----------------
      - name: "🔧 Define API Image Metadata"
        id: meta_api
        if: steps.get_version.outputs.VERSION
        uses: docker/metadata-action@v5
        with:
          images: thanosprime/entities-api-api
          tags: |
            type=semver,pattern={{version}},value=${{ steps.get_version.outputs.VERSION }}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' }}
            type=sha,prefix=sha-

      # ---------------- Sandbox image ------------
      - name: "🔧 Define Sandbox Image Metadata"
        id: meta_sandbox
        if: steps.get_version.outputs.VERSION
        uses: docker/metadata-action@v5
        with:
          images: thanosprime/entities-api-sandbox
          tags: |
            type=semver,pattern={{version}},value=${{ steps.get_version.outputs.VERSION }}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' }}
            type=sha,prefix=sha-

      - name: "🏗️ Build & Push API Image"
        if: steps.meta_api.outputs.tags != ''
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/api/Dockerfile
          push: true
          tags: ${{ steps.meta_api.outputs.tags }}
          labels: ${{ steps.meta_api.outputs.labels }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to:   type=gha,mode=max

      - name: "🏗️ Build & Push Sandbox Image"
        if: steps.meta_sandbox.outputs.tags != ''
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/sandbox/Dockerfile
          push: true
          tags: ${{ steps.meta_sandbox.outputs.tags }}
          labels: ${{ steps.meta_sandbox.outputs.labels }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to:   type=gha,mode=max
